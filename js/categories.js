/**
 * D√úZELTILMI≈û KATEGORƒ∞LER Sƒ∞STEMƒ∞
 * Geriye d√∂n√ºk uyumluluk ile yeni yapƒ±yƒ± birle≈ütirir
 */

(function() {
    // Kategorileri tanƒ±mla (i√ßerik deƒüi≈ümedi)
    const categories = [
        { id: 'breakfast', name: 'Kahvaltƒ±', icon: 'fas fa-coffee' },
        { id: 'soups', name: '√áorbalar', icon: 'fas fa-utensil-spoon' },
        { id: 'salads', name: 'Salatalar', icon: 'fas fa-leaf' },
        { id: 'mainDishes', name: 'Ana Yemekler', icon: 'fas fa-utensils' },
        { id: 'desserts', name: 'Tatlƒ±lar', icon: 'fas fa-cookie' },
        { id: 'drinks', name: 'ƒ∞√ßecekler', icon: 'fas fa-glass-cheers' },
        { id: 'popular', name: 'Pop√ºler', icon: 'fas fa-fire' },
        { id: 'vegan', name: 'Vegan', icon: 'fas fa-seedling' },
        { id: 'vegetarian', name: 'Vejetaryen', icon: 'fas fa-carrot' },
        { id: 'gluten-free', name: 'Glutensiz', icon: 'fas fa-bread-slice' },
        { id: 'healthy', name: 'Saƒülƒ±klƒ±', icon: 'fas fa-heartbeat' },
        { id: 'spicy', name: 'Acƒ± Sevenler', icon: 'fas fa-pepper-hot' },
        { id: 'meat', name: 'Et √áe≈üitleri', icon: 'fas fa-drumstick-bite' },
        { id: 'seafood', name: 'Deniz √úr√ºnleri', icon: 'fas fa-fish' },
        { id: 'favorites', name: 'Favorilerim', icon: 'fas fa-heart' }
    ];

    // Sayfa y√ºklendiƒüinde inicialize et
    document.addEventListener('DOMContentLoaded', initialize);

    function initialize() {
        console.log('üîÑ D√ºzeltilmi≈ü kategoriler sistemi ba≈ülatƒ±ldƒ±');
        
        // Alt men√ºdeki kategoriler butonuna tƒ±klama olayƒ± ekle
        const categoriesBtn = document.querySelector('.bottom-nav-item[data-action="categories"]');
        if (categoriesBtn) {
            categoriesBtn.addEventListener('click', handleCategoriesClick);
            console.log('‚úì Kategori butonu baƒülandƒ±');
        } else {
            console.error('‚ö†Ô∏è Kategoriler butonu bulunamadƒ±!');
        }
        
        // Global eri≈üim i√ßin fonksiyonlarƒ± dƒ±≈üa aktar
        window.Categories = {
            showModal: showCategoriesModal,
            closeModal: closeCategoriesModal,
            select: selectCategory,
            categories: categories
        };
        
        // Debug bilgisi
        console.log(`üìã ${categories.length} kategori y√ºklendi`);
    }

    // Alt men√ºdeki kategoriler butonuna tƒ±klama olayƒ±nƒ± i≈üle
    function handleCategoriesClick(e) {
        e.preventDefault();
        console.log('üîç Kategoriler butonuna tƒ±klandƒ±');
        
        try {
            // Aktif butonu g√ºncelle
            document.querySelectorAll('.bottom-nav-item').forEach(item => {
                item.classList.remove('active');
            });
            e.currentTarget.classList.add('active');
            
            // Kategoriler modalƒ±nƒ± g√∂ster
            showCategoriesModal();
        } catch (error) {
            console.error('‚ùå Kategoriler butonuna tƒ±klama i≈ülenirken hata:', error);
        }
    }

    // Kategoriler modalƒ±nƒ± g√∂ster
    function showCategoriesModal() {
        console.log('üìÇ Kategoriler modalƒ± a√ßƒ±lƒ±yor...');
        
        let modal = document.getElementById('categoriesModal');
        
        // Modal yoksa olu≈ütur
        if (!modal) {
            modal = createCategoriesModal();
            setupModalEvents(modal);
        }
        
        // Modalƒ± g√∂ster
        modal.style.display = 'flex';
        setTimeout(() => {
            modal.classList.add('active');
            
            // Scroll engelleme
            document.body.style.overflow = 'hidden';
        }, 10);
    }

    // Kategoriler modalƒ± olu≈ütur
    function createCategoriesModal() {
        console.log('üèó Kategoriler modalƒ± olu≈üturuluyor');
        
        const modal = document.createElement('div');
        modal.id = 'categoriesModal';
        modal.className = 'categories-modal';
        
        // Modal i√ßeriƒüi
        let modalHTML = `
            <div class="categories-modal-content">
                <div class="categories-modal-header">
                    <h3>Kategoriler</h3>
                    <button class="categories-close-btn" id="closeCategoriesBtn">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="categories-modal-body">
                    <div class="categories-grid">`;
        
        // Kategorileri ekle
        categories.forEach(category => {
            modalHTML += `
                <div class="category-item" data-category="${category.id}">
                    <div class="category-icon"><i class="${category.icon}"></i></div>
                    <div class="category-name">${category.name}</div>
                </div>
            `;
        });
        
        modalHTML += `
                    </div>
                </div>
            </div>
        `;
        
        modal.innerHTML = modalHTML;
        document.body.appendChild(modal);
        
        return modal;
    }

    // Modal olaylarƒ±nƒ± ayarla
    function setupModalEvents(modal) {
        // Kapatma butonuna tƒ±klama
        const closeBtn = modal.querySelector('#closeCategoriesBtn');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                closeCategoriesModal();
            });
        }
        
        // Modal arka planƒ±na tƒ±klama ile kapatma
        modal.addEventListener('click', e => {
            if (e.target === modal) {
                closeCategoriesModal();
            }
        });
        
        // Kategori √∂ƒüelerine tƒ±klama
        const categoryItems = modal.querySelectorAll('.category-item');
        categoryItems.forEach(item => {
            item.addEventListener('click', e => {
                const categoryId = item.getAttribute('data-category');
                console.log(`üîç Kategori √∂ƒüesine tƒ±klandƒ±: ${categoryId}`);
                
                // √ñnce modalƒ± kapat, sonra kaydƒ±r
                closeCategoriesModal(() => {
                    selectCategory(categoryId);
                });
            });
        });
    }

    // Kategoriler modalƒ±nƒ± kapat
    function closeCategoriesModal(callback) {
        const modal = document.getElementById('categoriesModal');
        if (!modal) return;
        
        console.log('üìÇ Kategoriler modalƒ± kapatƒ±lƒ±yor...');
        
        // Scroll engellemeyi kaldƒ±r
        document.body.style.overflow = '';
        document.body.style.position = '';
        document.body.style.top = '';
        document.body.style.width = '';
        document.body.style.paddingRight = '';
        
        // √ñzel durum d√ºzeltmesi
        document.body.classList.add('categories-modal-closed');
        setTimeout(() => document.body.classList.remove('categories-modal-closed'), 500);
        
        // Modal kapatma animasyonu
        modal.classList.remove('active');
        
        // Animasyon s√ºresinden sonra tamamen kaldƒ±r
        setTimeout(() => {
            modal.style.display = 'none';
            
            // √ñzel olay tetikle - scroll d√ºzeltmeler i√ßin
            document.dispatchEvent(new CustomEvent('categoriesModalClosed'));
            
            // Callback varsa √ßaƒüƒ±r
            if (typeof callback === 'function') {
                callback();
            }
        }, 300);
    }

    // Kategori se√ß ve o b√∂l√ºme kaydƒ±r
    function selectCategory(categoryId) {
        console.log(`üìå Kategori se√ßildi: ${categoryId}`);
        
        try {
            // Mehmet'in orijinal kategoriler yapƒ±sƒ± ile uyumlu kod
            // √ñnce men√º sekmesini kontrol et
            const menuTab = document.querySelector(`.menu-tab[data-target="${categoryId}"]`);
            
            if (menuTab) {
                // Sekmeye tƒ±kla - sekme sistemini kullan
                menuTab.click();
                
                // ƒ∞lgili b√∂l√ºm√º bul ve kaydƒ±r
                setTimeout(() => {
                    scrollToSection(categoryId);
                }, 100);
            } 
            else if (categoryId === 'favorites') {
                // Favoriler i√ßin √∂zel i≈ülem
                const section = document.getElementById('favoritesSection');
                if (section) {
                    scrollElementIntoView(section);
                }
            }
            else {
                // √ñzel kategoriler i√ßin filtre kullan
                console.log('Sekme bulunamadƒ±, filtre uygulanƒ±yor');
                if (typeof window.activateSpecialFilter === 'function') {
                    window.activateSpecialFilter(categoryId);
                } else {
                    console.warn('Filtre fonksiyonu bulunamadƒ±');
                }
            }
            
            // Dokunsal geri bildirim
            if ('vibrate' in navigator) {
                navigator.vibrate(30);
            }
        } catch (error) {
            console.error('‚ùå Kategori se√ßme i≈üleminde hata:', error);
        }
    }
    
    // Belirli bir b√∂l√ºme kaydƒ±rma yardƒ±mcƒ± fonksiyonu
    function scrollToSection(categoryId) {
        // B√∂l√ºm√ºn ID'sini olu≈ütur
        let sectionId = `${categoryId}Section`;
        
        // categoryId zaten "Section" ile bitiyorsa d√ºzelt
        if (categoryId.endsWith('Section')) {
            sectionId = categoryId;
        }
        
        const section = document.getElementById(sectionId);
        if (section) {
            scrollElementIntoView(section);
        } else {
            console.warn(`‚ö†Ô∏è B√∂l√ºm bulunamadƒ±: ${sectionId}`);
        }
    }
    
    // Bir elementi g√∂r√ºn√ºr alana kaydƒ±rma
    function scrollElementIntoView(element) {
        try {
            // Offset hesapla (header ve men√º sekmeleri i√ßin)
            const headerHeight = document.querySelector('.header')?.offsetHeight || 0;
            const menuTabsHeight = document.querySelector('.menu-tabs-container')?.offsetHeight || 0;
            const scrollOffset = headerHeight + menuTabsHeight + 10;
            
            // B√∂l√ºme kaydƒ±r
            const top = element.getBoundingClientRect().top + window.pageYOffset - scrollOffset;
            window.scrollTo({
                top: top,
                behavior: 'auto'
            });
            
            console.log(`‚úì "${element.id}" b√∂l√ºm√ºne kaydƒ±rƒ±ldƒ±`);
        } catch (error) {
            console.error('‚ùå Kaydƒ±rma i≈üleminde hata:', error);
            
            // Fallback y√∂ntem
            try {
                element.scrollIntoView({behavior: "auto", block: "start"});
            } catch (e) {
                console.error('‚ö†Ô∏è Alternatif kaydƒ±rma da ba≈üarƒ±sƒ±z:', e);
            }
        }
    }
    
    // Doƒürudan dƒ±≈üa aktarƒ±m - bazƒ± eski kodlar i√ßin
    window.showCategoriesModal = showCategoriesModal;
    window.closeCategoriesModal = closeCategoriesModal;
    window.selectCategory = selectCategory;
})();
